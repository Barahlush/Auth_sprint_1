openapi: 3.0.0
info:
  title: User Management API
  description: A REST API for authentification and authorization in a film database.
  version: 1.0.0
servers:
  - url: "http://localhost:3000/api/v1/auth/"
paths:
  /users/signup:
    post:
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The name of the user
                  type: string
                email:
                  description: The email of the user
                  type: string
                  format: email
                password:
                  description: The password of the user
                  type: string
                  format: password
        required: true
      responses:
        "201":
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully registered user.
                  id:
                    type: integer
                    example: 123
        "400":
          description: Bad request. User already exists
  /users/signin:
    post:
      description: Login an existing user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The email of the user
                  type: string
                  format: email
                password:
                  description: The password of the user
                  type: string
                  format: password
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged in.
                  id:
                    type: integer
                    example: 123
                  tokens:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzLCJpYXQiOjE1MTYyMzkwMjJ9.fjQ2M0jJHfjkd0a82jdkKjdkKjdkKjdkKjdkK
                      refresh_token:
                        type: string
                        example: fjQ2M0jJHfjkd0a82jdkKjdkKjdkKjdkKjdkK
        "400":
          description: Bad request
        "404":
          description: No such user
        "406":
          description: Already logged in
  "/users/{user_id}/refresh-token":
    post:
      description: Refresh access token
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  description: The refresh token
                  type: string
        required: true
      responses:
        "200":
          description: Successful refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully refreshed token.
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzLCJpYXQiOjE1MTYyMzkwMjJ9.fjQ2M0jJHfjkd0a82jdkKjdkKjdkKjdkKjdkK
                  refresh_token:
                    type: string
                    example: fjQ2M0jJHfjkd0a82jdkKjdkKjdkKjdkKjdkK.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzLCJpYXQiOjE1MTYyMzkwMjJ9
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/logout":
    post:
      description: Logout an existing user
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out.
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/total-logout":
    post:
      description: Logout the user from all devices
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out from all devices.
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}":
    get:
      description: Get data about the user
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully retrieved sign-in history.
                  user_data:
                    type: object
                    properties:
                      username:
                        description: Name of the user
                        type: string
                      email:
                        description: The email of the user
                        type: string
                        format: email
        "400":
          description: Bad request
      security:
        - bearerAuth: []
    put:
      description: Update the user's data
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The name of the user
                  type: string
                email:
                  description: The email of the user
                  type: string
                  format: email
                password:
                  description: The password of the user
                  type: string
                  format: password
        required: true
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully updated user.
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      username:
                        type: string
                        example: example
                      email:
                        type: string
                        format: email
                        example: example@example.com
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/signin-history":
    get:
      description: Get the sign-in history of an existing user
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination history.
          required: false
          schema:
            type: integer
        - name: count
          in: query
          description: Element count in paginate page
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully retrieved sign-in history.
                  signin_history:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 123
                        date:
                          type: string
                          format: date-time
                          example: "2022-05-01T12:30:00"
                        device:
                          type: string
                          example: "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0"
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  /roles:
    get:
      description: Get a list of all roles
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully retrieved all roles.
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 123
                        role_name:
                          type: string
                          example: example_role
        "400":
          description: Bad request
      security:
        - bearerAuth: []
    post:
      description: Create a new role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  description: The name of the role
                  type: string
        required: true
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully created role.
                  role:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      role_name:
                        type: string
                        example: example_role
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/roles/{role_id}":
    put:
      description: Update an existing role
      parameters:
        - name: role_id
          in: path
          description: The ID of the role
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  description: The name of the role
                  type: string
        required: true
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully updated role.
                  role:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      role_name:
                        type: string
                        example: updated_example_role
        "400":
          description: Bad request
      security:
        - bearerAuth: []
    delete:
      description: Delete an existing role
      parameters:
        - name: role_id
          in: path
          description: The ID of the role
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully deleted role.
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/roles":
    post:
      description: Assign a role to a user
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role_id:
                  description: The ID of the role
                  type: integer
        required: true
      responses:
        "200":
          description: Successful assignment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully assigned role to user.
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/roles/{role_id}":
    delete:
      description: Remove a role from a user
      parameters:
        - name: user_id
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
        - name: role_id
          in: path
          description: The ID of the role
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful removal
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully removed role from user.
        "400":
          description: Bad request
      security:
        - bearerAuth: []
  "/users/{user_id}/roles/check":
    post:
      description: Check if a user has a role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  description: The name of the role
                  type: string
        required: true
      responses:
        "200":
          description: Successful check
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has the role.
                  has_role:
                    type: boolean
        "400":
          description: Bad request
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
